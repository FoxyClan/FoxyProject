// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.28;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";

/**
 * @title FoxyClan contract
 * @dev Extends ERC721 Non-Fungible Token Standard basic implementation
 */
contract FoxyClan is ERC721, ERC721Enumerable, Ownable {

    bool public publicSaleIsActive = false;

    bool public privateSaleIsActive = false;

    string private _BaseURI;

    bool public allowListisActive = false;

    uint256 public constant MAX_SUPPLY = 20000;

    uint256 public constant maxPublicFoxyMint = 20;

    uint256 public constant publicFoxyPrice = 12500000000000000; //0.0125 ETH

    uint256 public constant privateFoxyPrice = 7500000000000000; //0.0075 ETH

    uint256 public saleMintLimit = 0;

    uint256 public currentSaleMinted = 0;

    mapping(address => uint8) private _AllowList;

    uint256[] public burnedTokenIds;

    mapping(uint256 => uint256) private _pointsTimestamp;

    mapping(uint256 => uint256) private _foxyPoints;

    mapping (uint256 => uint256) public _level;

    constructor() ERC721("FoxyClan", "FOXY") Ownable(msg.sender) {}

    function airdrop(address[] calldata addresses) external onlyOwner {
        for (uint256 i = 0; i < addresses.length; i++) {
            uint tokenId = totalSupply();
            _safeMint(addresses[i], tokenId);
        }
    }

    function transferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) {
        super.transferFrom(from, to, tokenId);
        if (from != address(0) && to != address(0)) {
            uint256 currentTime = block.timestamp;
            uint256 timePoints = (currentTime - _pointsTimestamp[tokenId]) / 1 days;
            uint256 totalPoints = _foxyPoints[tokenId] + timePoints;
            if (_level[tokenId] == 1) {
                _foxyPoints[tokenId] = 0;
                _pointsTimestamp[tokenId] = currentTime;
            } else if (_level[tokenId] == 2) {
                uint256 remainingPoints = (totalPoints + 1) / 2;
                _foxyPoints[tokenId] = remainingPoints;
                _pointsTimestamp[tokenId] = currentTime;
            } else if (_level[tokenId] == 3) {
                _foxyPoints[tokenId] = totalPoints;
                _pointsTimestamp[tokenId] = currentTime;
            }
        }
    }

    function getTokenPoints(uint256 tokenId) public view returns (uint256) {
        _requireOwned(tokenId);
        uint256 accumulatedPoints = (block.timestamp - _pointsTimestamp[tokenId]) / 1 days;
        return _foxyPoints[tokenId] + accumulatedPoints;
    }

    function getUserPoints(address owner) public view returns (uint256) {
        uint256 balance = balanceOf(owner);
        uint256 totalPoints = 0;

        for (uint256 i = 0; i < balance; i++) {
            uint256 tokenId = tokenOfOwnerByIndex(owner, i);
            totalPoints += getTokenPoints(tokenId);
        }
        return totalPoints;
    }

    /**
     * @dev Adds Foxy Points to a list of specified tokens.
     * @param tokenIds An array of token IDs to which points will be added.
     * @param pointsToAdd The number of Foxy Points to add to each token.
     */
    function addFoxyPointsToTokens(uint256[] calldata tokenIds, uint256 pointsToAdd) external onlyOwner {
        require(tokenIds.length > 0, "Token list cannot be empty");
        
        for (uint256 i = 0; i < tokenIds.length; i++) {
            uint256 tokenId = tokenIds[i];
            _requireOwned(tokenId);
            _foxyPoints[tokenId] += pointsToAdd;
        }
    }

    function flipPublicSaleState(uint256 maxMintAmount, bool state) external onlyOwner {
        publicSaleIsActive = state;
        if (publicSaleIsActive) {
            saleMintLimit = maxMintAmount;
            currentSaleMinted = 0;
        } else {
            saleMintLimit = 0;
        }
    }

    function flipPrivateSaleState() external onlyOwner {
        privateSaleIsActive = !privateSaleIsActive;
    }

    /**
     * @dev Sets the base URI for token URIs.
     * @param uri The base URI.
     */
    function setBaseURI(string memory uri) external onlyOwner() {
        _BaseURI = uri;
    }

    /**
     * @dev Get the base URI for token URIs.
     */
    function _baseURI() internal view override returns (string memory) {
        return _BaseURI;
    }


    /**
     * @dev Sets the allow list status.
     */
    function flipAllowListState() external onlyOwner {
        allowListisActive = !allowListisActive;
    }

    /**
     * @dev Sets the allow list for addresses and their corresponding mint limits.
     * @param addresses An array of addresses that will be allowed to mint FoxyClan nfts.
     * @param numAllowedToMint The number of tokens allowed to be minted for each address.
     */
    function setAllowList(address[] calldata addresses, uint8 numAllowedToMint) external onlyOwner {
        for (uint256 i = 0; i < addresses.length; i++) {
            _AllowList[addresses[i]] = numAllowedToMint;
        }
    }

    /*
     * @dev Returns the number of tokens available to mint for a specific address.
     * @param addr The address to check.
     * @return The number of tokens available to mint for a specific address.
     */
    function numAvailableToMint(address addr) external view returns (uint8) {
        return _AllowList[addr];
    }

    /*
    * @dev Mints tokens for addresses on the allow list.
    * @param numberOfTokens The number of tokens to mint.
    * 
    * Requirements:
    * - The allow list must be active.
    * - The sender must be on the allow list and have sufficient tokens available.
    * - The total supply must not exceed the max supply.
    * - The sender must send enough ether to cover the cost of minting.
    */
    function mintAllowList(uint8 numberOfTokens) external payable {
        uint256 supply = totalSupply();
        uint256 costToMint;
        if (privateSaleIsActive) {
            costToMint = privateFoxyPrice * numberOfTokens;
        } else {
            costToMint = publicFoxyPrice * numberOfTokens;
        }
        require(allowListisActive, "Allow list is not active");
        require(numberOfTokens <= _AllowList[msg.sender], "Exceeded max available to purchase");
        require(supply + numberOfTokens <= MAX_SUPPLY, "Purchase would exceed max tokens");
        require(costToMint <= msg.value, "Ether value sent is not correct");

        for (uint256 i = 0; i < numberOfTokens; i++) {
            uint256 tokenId;
            if (burnedTokenIds.length > 0) {
                tokenId = burnedTokenIds[0];
                burnedTokenIds.pop();
            } else {
                tokenId = totalSupply();
            }
            _safeMint(msg.sender, tokenId);
            _AllowList[msg.sender] --;
        }

        if (msg.value > costToMint) {
            uint256 excess = msg.value - costToMint;
            (bool success, ) = msg.sender.call{value: excess}("");
            require(success, "Refund failed");
        }
    }

    /**
     * @dev Mints tokens for the public sale.
     * @param numberOfTokens The number of tokens to mint.
     * 
     * Requirements:
     * - The sale must be active.
     * - The number of tokens to be minted must not exceed the maximum number of public minting.
     * - The total supply must not exceed the max supply.
     * - The sender must send enough ether to cover the cost of minting.
     */
    function mint(uint256 numberOfTokens) public payable {
        uint256 supply = totalSupply();
        uint256 costToMint = publicFoxyPrice * numberOfTokens;
        
        require(publicSaleIsActive, "Sale must be active to mint Foxy");
        require(numberOfTokens <= maxPublicFoxyMint, "Can only mint a limited number of tokens at a time");
        require(supply + numberOfTokens <= MAX_SUPPLY, "Purchase would exceed max tokens");
        require(costToMint <= msg.value, "Ether value sent is not correct");
        if (saleMintLimit > 0) {
            require(currentSaleMinted + numberOfTokens <= saleMintLimit, "Minting limit for this sale reached");
        }

        for (uint256 i = 0; i < numberOfTokens; i++) {
            uint256 tokenId;

            if (burnedTokenIds.length > 0) {
                tokenId = burnedTokenIds[burnedTokenIds.length - 1];
                burnedTokenIds.pop();
            } else {
                tokenId = totalSupply();
            }
            _safeMint(msg.sender, tokenId);
        }

        currentSaleMinted += numberOfTokens;

        if (msg.value > costToMint) {
            uint256 excess = msg.value - costToMint;
            (bool success, ) = msg.sender.call{value: excess}("");
            require(success, "Refund failed");
        }
    }


    function merge(uint256 tokenId1, uint256 tokenId2) external {
        require(ownerOf(tokenId1) == msg.sender, "You must own tokenId1");
        require(ownerOf(tokenId2) == msg.sender, "You must own tokenId2");
        require(tokenId1 != tokenId2, "Cannot merge the same token");

        uint256 tokenPoints1 = getTokenPoints(tokenId1);
        uint256 tokenPoints2 = getTokenPoints(tokenId2);

        uint256 newLevel = _level[tokenId1] > _level[tokenId2] 
            ? _level[tokenId1] 
            : _level[tokenId2];
        newLevel = newLevel == 3 ? newLevel : newLevel + 1;

        _burn(tokenId1);
        _burn(tokenId2);
        burnedTokenIds.push(tokenId2);

        _safeMint(msg.sender, tokenId1);
        _level[tokenId1] = newLevel;
        _level[tokenId2] = 0;

        uint256 mergePoints = _level[tokenId1] == 2 
            ? 100 
            : 250;

        _foxyPoints[tokenId1] = tokenPoints1 + tokenPoints2 + mergePoints;
    }


    function _safeMint(address to, uint256 tokenId, bytes memory data) internal override {
        super._safeMint(to, tokenId, data);
        _level[tokenId] = 1;
        _foxyPoints[tokenId] = 50;
        _pointsTimestamp[tokenId] = block.timestamp;
    }

    /**
     * @dev Checks if the contract implements a specific interface. 
     * This function is inherited from ERC721 and ERC721Enumerable and is essential for 
     * allowing other contracts and interfaces to interact correctly with this contract.
     */
    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    /**
     * @dev Overridden from ERC721Enumerable.
     */
    function _update(address to, uint256 tokenId, address auth) internal override(ERC721, ERC721Enumerable) returns (address) {
        return super._update(to, tokenId, auth);
    }

    /**
     * @dev Overridden from ERC721Enumerable.
     */
    function _increaseBalance(address account, uint128 amount) internal override(ERC721, ERC721Enumerable) {
        return super._increaseBalance(account, amount);
    }

    /**
     * @dev Reserves a specified number of tokens for the contract owner.
     * This function allow the creator to keep a certain number of tokens 
     * for future uses, such as giveaways, collaborations or special events.
     */
    function reserveFoxy(uint256 n) public onlyOwner {
      for (uint256 i = 0; i < n; i++) {
            uint256 tokenId;

            if (burnedTokenIds.length > 0) {
                tokenId = burnedTokenIds[burnedTokenIds.length - 1];
                burnedTokenIds.pop();
            } else {
                tokenId = totalSupply();
            }
            _safeMint(msg.sender, tokenId);
        }
    }
    
    /**
     * @dev Allows the contract owner to withdraw accumulated funds from the contract.
     */
    function withdraw() public onlyOwner {
        uint balance = address(this).balance;
        payable(msg.sender).transfer(balance);
    }

}